#BlueJ class context
comment0.params=
comment0.target=BinarySearchTree()
comment1.params=
comment1.target=boolean\ isEmpty()
comment10.params=tree
comment10.target=java.lang.Comparable\ getPredecessor(BSTNode)
comment11.params=tree
comment11.target=BSTNode\ removeNode(BSTNode)
comment12.params=element\ tree
comment12.target=BSTNode\ recRemove(java.lang.Comparable,\ BSTNode)
comment13.params=element
comment13.target=boolean\ remove(java.lang.Comparable)
comment14.params=tree
comment14.target=void\ inOrder(BSTNode)
comment15.params=tree
comment15.target=void\ preOrder(BSTNode)
comment16.params=tree
comment16.target=void\ postOrder(BSTNode)
comment17.params=orderType
comment17.target=int\ reset(int)
comment18.params=orderType
comment18.target=java.lang.Comparable\ getNext(int)
comment19.params=tree\ level
comment19.target=void\ printTreeRec(BSTNode,\ int)
comment2.params=tree
comment2.target=int\ recSize(BSTNode)
comment20.params=
comment20.target=void\ printTree()
comment21.params=tree\ level
comment21.target=void\ printOutlineRec(BSTNode,\ int)
comment22.params=
comment22.target=void\ printOutline()
comment3.params=
comment3.target=int\ size()
comment4.params=element\ tree
comment4.target=boolean\ recContains(java.lang.Comparable,\ BSTNode)
comment5.params=element
comment5.target=boolean\ contains(java.lang.Comparable)
comment6.params=element\ tree
comment6.target=java.lang.Comparable\ recGet(java.lang.Comparable,\ BSTNode)
comment7.params=element
comment7.target=java.lang.Comparable\ get(java.lang.Comparable)
comment8.params=element\ tree
comment8.target=BSTNode\ recAdd(java.lang.Comparable,\ BSTNode)
comment9.params=element
comment9.target=void\ add(java.lang.Comparable)
numComments=23
